{% extends 'layouts/bulma-ufs.layout.njk' %}
{% set pageTitle = CASE_FOR_SUPPORT_TITLE_TAG + GLOBAL_TAG_TITLE_SUFFIX %}
{#{% set showTinyMCEScripts = true %}#}
{% set storedCaseForSupportNotes = storedCaseForSupportNotes if storedCaseForSupportNotes %}
{% set projectName = projectName if projectName %}
{% set caseForSupportIsComplete = caseForSupportIsComplete if caseForSupportIsComplete %}
{% set backLinkContents =  [{url:'/prototypes/example-journey/application/', text:'Back to application'}] %}

{% block content %}


    {% call components.bulmaRow() %}
        {% call components.bulmaColumnAny(size='is-two-thirds') %}
            {{ components.captionHeading(text=CASE_FOR_SUPPORT_TITLE_TAG, caption=projectName) }}
        {%- endcall %}
    {%- endcall %}

    {% call components.bulmaRow() %}

        {% call components.bulmaColumnAny(size='is-full') %}

           {# {{ components.paragraph(text='What is your proposed project and how does it represent excellent research?', size='l')}}#}

            <details class="govuk-details" data-module="govuk-details">
                <summary class="govuk-details__summary">
                    <span class="govuk-details__summary-text">What you should include in your answer?</span>
                </summary>
                <div class="govuk-details__text">In this field the Opportunity author will have detailed the criteria they are looking for in the applicant's response. </div>
            </details>


        {%- endcall %}

    {%- endcall %}

    {% call components.form(action='/prototypes/example-journey/application/case-for-support', method='POST',name='caseForSupportNotes') %}

        {% call components.bulmaRow(extraClass='u-space-b30') %}
            {% call components.bulmaColumnAny(size='is-full') %}

                <style>
                    .tox-notification.tox-notification--in.tox-notification--error,
                    .tox-notifications-container {
                        /*display: none!important;*/
                    }
                </style>

                {{ components.textarea(options=selectOptions, label='Enter your case for support', labelBold=true, id='caseForSupportNotes', hint='', group=true, rows='18', size='', value=storedCaseForSupportNotes, extraClass='', visuallyHidden=true) }}

                <p>
                    <span id="wordCount" class="govuk-hint govuk-character-count__message" aria-live="polite"></span>
                </p>

            {%- endcall %}

        {%- endcall %}

        {% call components.bulmaRow() %}

            {% call components.bulmaColumnAny(size='is-full') %}

                {% call components.formGroup() %}
                    <div class="application-item">
                        <div class="application-item__contents">
                            <fieldset class="govuk-fieldset" aria-describedby="markAsComplete">
                                <legend class="govuk-fieldset__legend govuk-visually-hidden">
                                    <h3 class="govuk-fieldset__heading" id="">Mark as complete</h3>
                                </legend>
                                <div class="govuk-checkboxes">
                                    <div class="govuk-checkboxes__item">
                                        <input class="govuk-checkboxes__input" id="markAsComplete" name="isComplete" type="checkbox" {% if caseForSupportIsComplete == 'on' %} checked{% endif %}>
                                        <label class="govuk-label govuk-checkboxes__label" for="markAsComplete">Mark as complete</label>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                {%- endcall %}

            {%- endcall %}

        {%- endcall %}

        {% call components.bulmaRow() %}
            {% call components.bulmaColumnAny(size='is-full') %}

                <div class="application-controls govuk-clearfix">
                    {{ components.button(text='Save and return', extraClass="application-controls__submit")}}
                </div>

            {%- endcall %}

        {%- endcall %}

    {%- endcall %}

{% endblock %}

{% block bodyScripts %}
    <script>
      /*function toggleVisibility(_this, id, className) {
        // event.preventDefault();
        let toggleSwitch = _this;
        let toggleItem = document.getElementById(id);
        if (hasClass(toggleItem, className)) {
          toggleSwitch.classList.add('filter__title--closed');
          toggleItem.classList.remove(className);
          toggleSwitch.setAttribute('aria-expanded', true);
        }
        else  {
          toggleSwitch.classList.remove('filter__title--closed');
          toggleItem.classList.add(className);
          toggleSwitch.setAttribute('aria-expanded', false);
        }
        // return false;
      }
      function hasClass(target, className) {
        return new RegExp('(\\s|^)' + className + '(\\s|$)').test(target.className);
      }*/
    </script>

    <script src="https://cdn.tiny.cloud/1/phk3goz7y02jvj65em0m21azcq1qr7abduimch9isoe4jkor/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
      let wordy, count, newCount, overCount;
      let limit = 400;
      let countOutput = document.getElementById('wordCount');
      countOutput.innerHTML = 'You have ' +  limit + ' words remaining';

      tinymce.init({
        selector: 'textarea',
        height: 600,
        menubar: false,
        plugins: [
          'lists charmap anchor',
          'paste code wordcount '
        ],
        // toolbar: 'formatselect | bold italic | numlist bullist |',
        toolbar: '',
        content_css: [
          '//fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i',
          '/stylesheets/tinymce.css'
        ],
        setup: function(editor) {
          editor.on('keyup', function(e) {
            wordy = editor.plugins.wordcount;
            count = parseInt(wordy.body.getWordCount());
            newCount = limit - count;
            // overCount =  limit + count;
            overCount =  count - limit;
            if (newCount < 0) {
              countOutput.innerHTML = '<span style="font-weight:700;color:red">You have ' +  overCount + ' words too many</span>'
            } else {
              countOutput.innerHTML = 'You have ' +  newCount + ' words remaining'
            }
          });
        }
      });
    </script>
{% endblock %}

